version: '3'
services:
  tensorflow-app_amd:
    build:
      context: .
      dockerfile: Dockerfile
    image: rocm/tensorflow:latest
    volumes:
      - ./train_src:/app
      - /mnt/model_data/models:/models
      - /mnt/model_data/results:/results
      - /mnt/AI_new/cache_back/_100batch:/data
    devices:
      - /dev/dri
      - /dev/kfd
    working_dir: /app
    command: [ "python3", "train_neuralnet.py" ]
  tensorflow-app_nvidia:
    build:
      context: .
      dockerfile: dockerfile-nvidia
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: all
            capabilities: [gpu]  
    environment:
      - NODES="['tcp://localhost:2375', 'tcp://127.0.0.1:2375']"  
    volumes:
      - ./train_src:/app
      - /mnt/model_data/models:/models
      - /mnt/model_data/results:/results
      - /home/nils/data/cache_back/_100batch:/data
    working_dir: /app
    command: [ "python3", "train_neuralnet.py" ]
  generate_new_model:
    image: python:3
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./generate_model_src:/app
      - /mnt/model_data/models:/models
      - /mnt/model_data/results:/results
    working_dir: /app
    command: [ "python3", "generate_model.py" ]
  display_app:
    build: 
      context: ./display
      dockerfile: dockerfile
    environment:
      - MODELS_DIR='/models'
      - RESULTS_DIR='/results'
      - NODES="['tcp://localhost:2375', 'tcp://127.0.0.1:2375']"
    volumes:
      - /mnt/model_data/models:/models
      - /mnt/model_data/results:/results
  controller:
    build:
      context: ./controller
      dockerfile: dockerfile
    environment:
      - NODES=["192.168.1.180"]
      - NODE_PASS=["pass123"]
      - MODELS_DIR='/models'
      - RESULTS_DIR='/results'
      - NUMBER_OF_MODELS=3
      - CONCURRENT_JOBS=1
      - IMAGE_NAME='ai-training'
    volumes:
      - ./models:/models
      - ./results:/results

